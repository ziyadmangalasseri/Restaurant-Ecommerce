// app/api/products/route.js
import { NextResponse } from "next/server";
import dbConnect from "@/lib/mongodb";
import productModel from "@/lib/models/Product";
import Category from "@/lib/models/Category";
import { v2 as cloudinary } from "cloudinary";
import { getServerSession } from "next-auth";
import { authOptions } from "../auth/[...nextauth]/route";

// Cloudinary config
cloudinary.config({
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_API_SECRET,
});

export async function POST(request) {
  const session = await getServerSession(authOptions);
  // console.log("Full session object:", session); // Debug log

  if (!session?.user || session.user.role !== "admin") {
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  }
  try {
    await dbConnect();

    const formData = await request.formData();

    const name = formData.get("name");
    const description = formData.get("description") || "";
    const brand = formData.get("brand");
    const price = parseFloat(formData.get("price")) || 0;
    const image = formData.get("image");
    const category = formData.get("category") || "";
    const stock = parseInt(formData.get("stock")) || 0;
    const color = formData.get("color");
    const NewArrival = formData.get("NewArrival") || false;
    const TopProduct = formData.get("TopProduct") || false;

    // Basic validation
    if (!name) {
      return NextResponse.json(
        { error: "Product name is required" },
        { status: 400 }
      );
    }

    // Upload image to Cloudinary
    let imageUrl = "";

    // Handle image upload via Cloudinary
    if (image && image instanceof File) {
      try {
        // Convert file to base64 string for Cloudinary upload
        const bytes = await image.arrayBuffer();
        const buffer = Buffer.from(bytes);
        const base64String = `data:${image.type};base64,${buffer.toString(
          "base64"
        )}`;

        // Upload to Cloudinary
        const uploadResult = await new Promise((resolve, reject) => {
          cloudinary.uploader.upload(
            base64String,
            {
              folder: "ecommerce-products", // Changed from 'ecommerce-categories' to 'ecommerce-products'
              resource_type: "image",
            },
            (error, result) => {
              if (error) {
                console.error("Cloudinary upload error:", error);
                reject(error);
              } else {
                // console.log("Cloudinary upload success");
                resolve(result);
              }
            }
          );
        });

        // Use the secure URL from Cloudinary
        imageUrl = uploadResult.secure_url;
      } catch (uploadError) {
        console.error("Error uploading image to Cloudinary:", uploadError);
        return NextResponse.json(
          { error: "Failed to upload image", message: uploadError.message },
          { status: 500 }
        );
      }
    } else {
      return NextResponse.json(
        { error: "Product image is required" },
        { status: 400 }
      );
    }

    // Prepare product data - slug will be auto-generated by the model's pre-save hook
    const productData = {
      name,
      description,
      brand,
      price,
      image: imageUrl,
      category,
      stock,
      color,
      NewArrival,
      TopProduct,
    };

    // Save to database
    const newProduct = await productModel.create(productData);

    return NextResponse.json(newProduct, { status: 201 });
  } catch (error) {
    console.error("Error creating product:", error);

    // Special handling for duplicate key errors
    if (error.code === 11000) {
      return NextResponse.json(
        {
          error: "Product with this name already exists",
          message: "Please use a different product name",
        },
        { status: 409 } // Conflict status code
      );
    }

    return NextResponse.json(
      { error: "Failed to create product", message: error.message },
      { status: 500 }
    );
  }
}

export async function GET(request) {
  try {
    await dbConnect();
    const { searchParams } = new URL(request.url);

    // Get pagination parameters
    const page = parseInt(searchParams.get("page")) || 1;
    const limit = parseInt(searchParams.get("limit")) || 5; // Changed to 5 for more pages with 10 products
    const skip = (page - 1) * limit;

    // Get filter parameters
    const search = searchParams.get("search") || "";
    const categoryNames =
      searchParams.get("categories")?.split(",").map(c=>c.trim().toLowerCase()) || [];
    let categoryIds =[];  

    const colors = searchParams.get("colors")?.split(",").filter(Boolean) || [];
    const minPrice = parseFloat(searchParams.get("minPrice")) || 0;
    const maxPrice = parseFloat(searchParams.get("maxPrice")) || 9999;
    const sortBy = searchParams.get("sortBy") || "featured";
    const NewArrival = searchParams.get("NewArrival");
    const TopProduct = searchParams.get("TopProduct");

    // Build query object
    const query = {};

    // Text search
    if (search) {
      query.name = { $regex: search, $options: "i" };
    }

    // Categories filter
    if (categoryNames.length > 0) {
      const categoryDocs = await Category.find({
        name : { 
          $in :categoryNames.map(name=>new RegExp(`^${name}$`,`i`))
         }
      }).select("_id");
      categoryIds = categoryDocs.map(cat => cat._id);
      query.category = { $in : categoryIds};
    }

    // console.log(query.category);

    // Colors filter
    if (colors.length > 0) {
      query.color = { $in: colors };
    }

    // Price range filter
    query.price = { $gte: minPrice, $lte: maxPrice };

    // Boolean filters
    if (NewArrival === "true") {
      query.NewArrival = true;
    }
    if (TopProduct === "true") {
      query.TopProduct = true;
    }

    // Determine sort options
    let sortOptions = {};
    switch (sortBy) {
      case "price-low-high":
        sortOptions = { price: 1 };
        break;
      case "price-high-low":
        sortOptions = { price: -1 };
        break;
      case "newest":
        sortOptions = { createdAt: -1 };
        break;
      case "rating":
        sortOptions = { rating: -1 };
        break;
      case "discount":
        sortOptions = { discount: -1 };
        break;
      default:
        // Featured - could be a combination of factors or just use default _id
        sortOptions = { _id: -1 };
    }

    // console.log("Query:", JSON.stringify(query));
    // console.log("Skip:", skip, "Limit:", limit);

    // Execute query with proper pagination
    const [products, total] = await Promise.all([
      productModel.find(query).sort(sortOptions).skip(skip).limit(limit),
      productModel.countDocuments(query),
    ]);

    // console.log("Found products:", products.length);
    // console.log("Total matching products:", total);

    // Make sure we calculate total pages correctly
    const totalPages = Math.max(1, Math.ceil(total / limit));

    return NextResponse.json({
      products,
      totalPages: totalPages,
      currentPage: page,
      totalProducts: total,
    });
  } catch (error) {
    console.error("API Error:", error);
    return NextResponse.json(
      { error: "Failed to fetch products: " + error.message },
      { status: 500 }
    );
  }
}
